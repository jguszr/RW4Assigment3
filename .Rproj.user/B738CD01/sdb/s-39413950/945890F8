{
    "collab_server" : "",
    "contents" : "\n# Assert the informed state input, used to make the core function more readable\nassertInputs <- function(data,state) {\n  \n  if (!state %in% data$State) {\n    return(FALSE)\n  } \n  return(TRUE)\n}\n\n# assert the column number based on the informed outcome parameter or stop the function \n# also used to make the hankHospital more readable \nassertColNumber <- function(outcome) {\n  switch(outcome, \"heart attack\" = {\n    col = 11\n  }, \"heart failure\" = {\n    col = 17\n  }, \"pneumonia\" = {\n    col = 23\n  }, stop(\"invalid outcome\"))\n  \n  return(col)\n  \n}\n\n# the hankhospital function takes the state and outcome parameters to act as \"key\" filters \n# and aftwords it uses the num parameter to check the hanking of a hospital.\nrankhospital <- function(state, outcome, num = \"best\") {\n  \n  data <- read.csv(\"outcome-of-care-measures.csv\", colClasses = \"character\",header = TRUE)\n  \n  if(assertInputs(data,state) == FALSE) {\n    stop(\"invalid state\")\n  }\n  \n  col <- assertColNumber(outcome)\n  \n  data[, col] <- as.numeric(data[, col])\n  df <- na.omit(data[data[, 7] == state, c(2, col)])\n  hospitals = nrow(df)\n  \n  switch(num, best = {\n    num <- 1\n  }, worst = {\n    num <- hospitals\n  })\n  \n  if (num > hospitals) {\n    return(NA)\n  }\n  \n  return(df[order(df[, 2], df[, 1]), ][num, 1])\n}\n\n\n",
    "created" : 1473626887939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "455529434",
    "id" : "945890F8",
    "lastKnownWriteTime" : 1473631224,
    "last_content_update" : 1473631224150,
    "path" : "~/coursera/datasciencecoursera/RW4Assigment3/hankhospital.R",
    "project_path" : "hankhospital.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}